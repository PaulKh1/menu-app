import streamlit as st
import pandas as pd
import numpy as np
import re
import sqlite3
import bcrypt
import datetime
from sqlalchemy import create_engine, text

# --------------------------------------------------------------------------------
# –ù–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è —Å—Ç–æ—Ä—ñ–Ω–∫–∏ Streamlit
st.set_page_config(page_title='–ú–µ–Ω—é —Ö–∞—Ä—á—É–≤–∞–Ω–Ω—è', layout='wide')

# --------------------------------------------------------------------------------
# –ü—ñ–¥–∫–ª—é—á–µ–Ω–Ω—è –∞–±–æ —Å—Ç–≤–æ—Ä–µ–Ω–Ω—è –±–∞–∑–∏ –¥–∞–Ω–∏—Ö SQLite
# –°—Ç–≤–æ—Ä–∏–º–æ engine —á–µ—Ä–µ–∑ SQLAlchemy –¥–ª—è –∑—Ä—É—á–Ω–æ—Å—Ç—ñ
engine = create_engine('sqlite:///food_app.db', echo=False)

# --------------------------------------------------------------------------------
# –§—É–Ω–∫—Ü—ñ—ó –¥–ª—è —Ä–æ–±–æ—Ç–∏ –∑ –±–∞–∑–æ—é –¥–∞–Ω–∏—Ö (–∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—ñ, –∂—É—Ä–Ω–∞–ª–∏, —Ç–æ—â–æ)
def create_tables():
    """–°—Ç–≤–æ—Ä–µ–Ω–Ω—è —Ç–∞–±–ª–∏—Ü—å, —è–∫—â–æ —ó—Ö —â–µ –Ω–µ–º–∞—î."""
    with engine.connect() as conn:
        # –¢–∞–±–ª–∏—Ü—è –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—ñ–≤
        conn.execute("""
        CREATE TABLE IF NOT EXISTS users (
            id INTEGER PRIMARY KEY AUTOINCREMENT,
            username TEXT UNIQUE NOT NULL,
            password_hash BLOB NOT NULL
        );
        """)
        # –¢–∞–±–ª–∏—Ü—è –∂—É—Ä–Ω–∞–ª—É –≤–∞–≥–∏ —Ç–∞ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—ñ
        conn.execute("""
        CREATE TABLE IF NOT EXISTS logs (
            id INTEGER PRIMARY KEY AUTOINCREMENT,
            user_id INTEGER NOT NULL,
            date DATE NOT NULL,
            weight REAL NOT NULL,
            activity INTEGER NOT NULL,
            FOREIGN KEY(user_id) REFERENCES users(id)
        );
        """)
        # –¢–∞–±–ª–∏—Ü—è –¥–ª—è push-–Ω–∞–≥–∞–¥—É–≤–∞–Ω—å (–¥–µ–º–æ)
        conn.execute("""
        CREATE TABLE IF NOT EXISTS reminders (
            id INTEGER PRIMARY KEY AUTOINCREMENT,
            user_id INTEGER NOT NULL,
            reminder_time TEXT NOT NULL,
            message TEXT,
            FOREIGN KEY(user_id) REFERENCES users(id)
        );
        """)

create_tables()  # –°—Ç–≤–æ—Ä–∏–º–æ —Ç–∞–±–ª–∏—Ü—ñ –ø—Ä–∏ –∑–∞–ø—É—Å–∫—É

def get_user_id(username):
    """–ü–æ–≤–µ—Ä—Ç–∞—î id –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ –∑–∞ username."""
    with engine.connect() as conn:
        result = conn.execute(
            text("SELECT id FROM users WHERE username = :u"),
            {"u": username}
        ).fetchone()
    return result[0] if result else None

def create_user(username, password):
    """–°—Ç–≤–æ—Ä—é—î–º–æ –Ω–æ–≤–æ–≥–æ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞, —è–∫—â–æ —Ç–∞–∫–æ–≥–æ –Ω–µ–º–∞—î. –ü–æ–≤–µ—Ä—Ç–∞—î True/False."""
    if not username or not password:
        return False
    with engine.connect() as conn:
        # –ü–µ—Ä–µ–≤—ñ—Ä–∏—Ç–∏, —á–∏ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á —É–∂–µ —ñ—Å–Ω—É—î
        existing = conn.execute(
            text("SELECT username FROM users WHERE username=:u"), 
            {"u": username}
        ).fetchone()
        if existing:
            return False
        
        # –•–µ—à—É—î–º–æ –ø–∞—Ä–æ–ª—å
        password_hash = bcrypt.hashpw(password.encode('utf-8'), bcrypt.gensalt())
        
        # –î–æ–¥–∞—î–º–æ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞
        conn.execute(
            text("INSERT INTO users (username, password_hash) VALUES (:u, :p)"),
            {"u": username, "p": password_hash}
        )
    return True

def login_user(username, password):
    """–ü–µ—Ä–µ–≤—ñ—Ä—è—î –ª–æ–≥—ñ–Ω —Ç–∞ –ø–∞—Ä–æ–ª—å. –ü–æ–≤–µ—Ä—Ç–∞—î True/False."""
    if not username or not password:
        return False
    with engine.connect() as conn:
        row = conn.execute(
            text("SELECT password_hash FROM users WHERE username=:u"), 
            {"u": username}
        ).fetchone()
    if not row:
        return False
    
    stored_hash = row[0]
    return bcrypt.checkpw(password.encode('utf-8'), stored_hash)

# --------------------------------------------------------------------------------
# –§—É–Ω–∫—Ü—ñ—ó –¥–ª—è –∂—É—Ä–Ω–∞–ª—É (–ª–æ–≥—ñ–≤)
def add_log(user_id, date_value, weight_value, activity_value):
    """–î–æ–¥–∞—î –∑–∞–ø–∏—Å –ø—Ä–æ –≤–∞–≥—É –π –∞–∫—Ç–∏–≤–Ω—ñ—Å—Ç—å —É —Ç–∞–±–ª–∏—Ü—é logs."""
    with engine.connect() as conn:
        conn.execute(
            text("""INSERT INTO logs (user_id, date, weight, activity)
                    VALUES (:uid, :d, :w, :a)"""),
            {"uid": user_id, "d": date_value, "w": weight_value, "a": activity_value}
        )

def get_logs(user_id):
    """–û—Ç—Ä–∏–º—É—î —É—Å—ñ –ª–æ–≥–∏ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ –∑ —Ç–∞–±–ª–∏—Ü—ñ logs."""
    with engine.connect() as conn:
        data = conn.execute(
            text("SELECT date, weight, activity FROM logs WHERE user_id=:uid ORDER BY date"),
            {"uid": user_id}
        ).fetchall()
    # –ü–µ—Ä–µ—Ç–≤–æ—Ä–∏–º–æ —É DataFrame
    if data:
        df = pd.DataFrame(data, columns=['–î–∞—Ç–∞', '–í–∞–≥–∞', '–ê–∫—Ç–∏–≤–Ω—ñ—Å—Ç—å'])
        return df
    else:
        return pd.DataFrame(columns=['–î–∞—Ç–∞', '–í–∞–≥–∞', '–ê–∫—Ç–∏–≤–Ω—ñ—Å—Ç—å'])

# --------------------------------------------------------------------------------
# –§—É–Ω–∫—Ü—ñ—ó –¥–ª—è push-–Ω–∞–≥–∞–¥—É–≤–∞–Ω—å (–¥–µ–º–æ-—Ä–µ–∞–ª—ñ–∑–∞—Ü—ñ—è)
def add_reminder(user_id, reminder_time, message):
    with engine.connect() as conn:
        conn.execute(
            text("""INSERT INTO reminders (user_id, reminder_time, message)
                    VALUES (:uid, :rt, :m)"""),
            {"uid": user_id, "rt": reminder_time, "m": message}
        )

def get_reminders(user_id):
    with engine.connect() as conn:
        rows = conn.execute(
            text("SELECT id, reminder_time, message FROM reminders WHERE user_id=:uid"),
            {"uid": user_id}
        ).fetchall()
    if rows:
        df = pd.DataFrame(rows, columns=['ID', '–ß–∞—Å –Ω–∞–≥–∞–¥—É–≤–∞–Ω–Ω—è', '–ü–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è'])
        return df
    else:
        return pd.DataFrame(columns=['ID', '–ß–∞—Å –Ω–∞–≥–∞–¥—É–≤–∞–Ω–Ω—è', '–ü–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è'])

def delete_reminder(reminder_id):
    with engine.connect() as conn:
        conn.execute(
            text("DELETE FROM reminders WHERE id=:rid"),
            {"rid": reminder_id}
        )

# --------------------------------------------------------------------------------
# –ó—á–∏—Ç—É–≤–∞–Ω–Ω—è –º–µ–Ω—é –∑ CSV
# –ü—Ä–∏–ø—É—Å—Ç–∏–º–æ, —â–æ —Ñ–∞–π–ª –ª–µ–∂–∏—Ç—å –≤ –æ–¥–Ω—ñ–π –ø–∞–ø—Ü—ñ –∑ app.py
@st.cache_data
def load_menu():
    df = pd.read_csv('–•–∞—Ä—á—É–≤–∞–Ω–Ω—è.csv', encoding='utf-8-sig').dropna()
    return df

menu_df = load_menu()

# --------------------------------------------------------------------------------
# –î–æ–ø–æ–º—ñ–∂–Ω—ñ —Ñ—É–Ω–∫—Ü—ñ—ó –¥–ª—è –º–µ–Ω—é
def extract_calories(text):
    """
    –í–∏—Ç—è–≥—É—î —Å—É–º–∞—Ä–Ω—ñ –∫–∞–ª–æ—Ä—ñ—ó –∑ —Ä—è–¥–∫–∞ (–Ω–∞–ø—Ä–∏–∫–ª–∞–¥, "–û–º–ª–µ—Ç 350 –∫–∫–∞–ª" -> 350).
    –Ø–∫—â–æ —Ç–∞–∫–∏—Ö –≤–∫–∞–∑—ñ–≤–æ–∫ –∫—ñ–ª—å–∫–∞, –ø—ñ–¥—Å—É–º–æ–≤—É—î–º–æ.
    """
    matches = re.findall(r'(\d+)\s?–∫–∫–∞–ª', text)
    return sum(map(int, matches)) if matches else 0

# --------------------------------------------------------------------------------
# –û–¢–û–ñ, –ü–û–ß–ò–ù–ê–Ñ–ú–û –õ–û–ì–Ü–ö–£ –î–û–î–ê–¢–ö–ê
def main():
    st.title("üçΩÔ∏è –ü–µ—Ä—Å–æ–Ω–∞–ª—å–Ω–∏–π –¥–æ–¥–∞—Ç–æ–∫ —Ö–∞—Ä—á—É–≤–∞–Ω–Ω—è, –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—ñ —Ç–∞ –ø–æ–∫—É–ø–æ–∫")

    if 'user' not in st.session_state:
        st.session_state['user'] = None
    
    # ----------------------
    # –ê–≤—Ç–æ—Ä–∏–∑–∞—Ü—ñ—è / –†–µ—î—Å—Ç—Ä–∞—Ü—ñ—è
    st.sidebar.header("üîê –ê–≤—Ç–æ—Ä–∏–∑–∞—Ü—ñ—è / –†–µ—î—Å—Ç—Ä–∞—Ü—ñ—è")
    login_mode = st.sidebar.radio("–û–±–µ—Ä—ñ—Ç—å –¥—ñ—é:", ["–í—Ö—ñ–¥", "–†–µ—î—Å—Ç—Ä–∞—Ü—ñ—è"])
    username_input = st.sidebar.text_input("–Ü–º'—è –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞:")
    password_input = st.sidebar.text_input("–ü–∞—Ä–æ–ª—å:", type='password')
    
    if st.sidebar.button("–£–≤—ñ–π—Ç–∏" if login_mode == "–í—Ö—ñ–¥" else "–ó–∞—Ä–µ—î—Å—Ç—Ä—É–≤–∞—Ç–∏—Å—è"):
        if login_mode == "–í—Ö—ñ–¥":
            if login_user(username_input, password_input):
                st.session_state['user'] = username_input
                st.sidebar.success(f"–õ–∞—Å–∫–∞–≤–æ –ø—Ä–æ—Å–∏–º–æ, {username_input}!")
            else:
                st.sidebar.error("–ù–µ–≤—ñ—Ä–Ω—ñ —ñ–º'—è –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ –∞–±–æ –ø–∞—Ä–æ–ª—å!")
        else:  # –†–µ—î—Å—Ç—Ä–∞—Ü—ñ—è
            created = create_user(username_input, password_input)
            if created:
                st.sidebar.success(f"–ö–æ—Ä–∏—Å—Ç—É–≤–∞—á {username_input} –∑–∞—Ä–µ—î—Å—Ç—Ä–æ–≤–∞–Ω–∏–π —É—Å–ø—ñ—à–Ω–æ!")
                st.session_state['user'] = username_input
            else:
                st.sidebar.error("–¢–∞–∫–∏–π –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á –≤–∂–µ —ñ—Å–Ω—É—î –∞–±–æ –Ω–µ–∫–æ—Ä–µ–∫—Ç–Ω—ñ –¥–∞–Ω—ñ!")
    
    # –Ø–∫—â–æ –Ω–µ–º–∞—î –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω–æ–≥–æ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ ‚Äî –ø—Ä–∏–ø–∏–Ω—è—î–º–æ —Ä–æ–±–æ—Ç—É
    if not st.session_state['user']:
        st.warning("–ë—É–¥—å –ª–∞—Å–∫–∞, –∞–≤—Ç–æ—Ä–∏–∑—É–π—Ç–µ—Å—å –∞–±–æ –∑–∞—Ä–µ—î—Å—Ç—Ä—É–π—Ç–µ—Å—å.")
        return
    # -------------------------------------------------------------------------
    # –û—Ç—Ä–∏–º—É—î–º–æ user_id –∑ –±–∞–∑–∏
    user_id = get_user_id(st.session_state['user'])

    # –ë–ª–æ–∫ —ñ–∑ –º–æ–∂–ª–∏–≤—ñ—Å—Ç—é –≤–∏–π—Ç–∏
    if st.sidebar.button("–í–∏–π—Ç–∏"):
        st.session_state['user'] = None
        st.experimental_rerun()

    # -------------------------------------------------------------------------
    # –ë—ñ—á–Ω–∞ –ø–∞–Ω–µ–ª—å: –ö–∞–ª—å–∫—É–ª—è—Ç–æ—Ä –Ü–ú–¢
    st.sidebar.header("üßÆ –ö–∞–ª—å–∫—É–ª—è—Ç–æ—Ä –Ü–ú–¢")
    weight_sidebar = st.sidebar.number_input("–í–∞–≥–∞ (–∫–≥):", 30.0, 200.0, 80.0)
    height_sidebar = st.sidebar.number_input("–ó—Ä—ñ—Å—Ç (—Å–º):", 100, 220, 170)
    bmi = weight_sidebar / ((height_sidebar / 100)**2)
    st.sidebar.metric("–í–∞—à –Ü–ú–¢:", f"{bmi:.2f}")

    # -------------------------------------------------------------------------
    # –ì–æ–ª–æ–≤–Ω—ñ –≤–∫–ª–∞–¥–∫–∏
    tabs = st.tabs(["–ú–µ–Ω—é —Ç–∞ –ø–æ–∫—É–ø–∫–∏", "–ñ—É—Ä–Ω–∞–ª –≤–∞–≥–∏ —Ç–∞ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—ñ", "–ü—É—à-–Ω–∞–≥–∞–¥—É–≤–∞–Ω–Ω—è"])

    # ========================== 1. –ú–ï–ù–Æ –¢–ê –°–ü–ò–°–û–ö –ü–û–ö–£–ü–û–ö =====================
    with tabs[0]:
        st.subheader("–ú–µ–Ω—é —Ç–∞ –∞–≤—Ç–æ–º–∞—Ç–∏—á–Ω–∏–π —Å–ø–∏—Å–æ–∫ –ø–æ–∫—É–ø–æ–∫")

        # --- (A) –í—ñ–¥–æ–±—Ä–∞–∂–µ–Ω–Ω—è –º–µ–Ω—é ---
        st.markdown("### –ú–µ–Ω—é –∑ —Ñ–∞–π–ª—É `–•–∞—Ä—á—É–≤–∞–Ω–Ω—è.csv`")

        # –ú–æ–∂–ª–∏–≤—ñ—Å—Ç—å –≤–∏–±—Ä–∞—Ç–∏ —Ñ—ñ–ª—å—Ç—Ä–∞—Ü—ñ—é –∑–∞ –¥–Ω–µ–º —Ç–∏–∂–Ω—è **–∞–±–æ** –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ—é –¥–∞—Ç–æ—é
        # (—è–∫—â–æ —É CSV —î —Ä–µ–∞–ª—å–Ω—ñ –¥–∞—Ç–∏ —É –ø–æ–ª—ñ '–î–Ω—ñ')
        unique_days = menu_df['–î–Ω—ñ'].unique().tolist()

        # –í–∏–±—ñ—Ä: –∞–±–æ –º–∏ —Ñ—ñ–ª—å—Ç—Ä—É—î–º–æ –∑–∞ –¥–Ω–µ–º, –∞–±–æ –∑–∞ –¥–∞—Ç–æ—é
        day_or_date = st.selectbox("–û–±–µ—Ä—ñ—Ç—å –¥–µ–Ω—å/–¥–∞—Ç—É:", unique_days)
        filtered_menu = menu_df[menu_df['–î–Ω—ñ'].astype(str).str.lower() == str(day_or_date).lower()]

        # –í–∏—Ç—è–≥—É—î–º–æ –∫–∞–ª–æ—Ä—ñ–π–Ω—ñ—Å—Ç—å –¥–ª—è –∫–æ–∂–Ω–æ–≥–æ –∑–∞–ø–∏—Å—É
        filtered_menu['–ö–∞–ª–æ—Ä—ñ—ó (–ü–∞–≤–ª–æ)'] = filtered_menu['–°—Ç—Ä–∞–≤–∞ (—Ä–µ—Ü–µ–ø—Ç, –∫–∞–ª–æ—Ä—ñ—ó, —Ç–µ—Ö–∫–∞—Ä—Ç–∞)'].apply(extract_calories)
        # –ú–æ–∂–Ω–∞ –ø—Ä–∏–ø—É—Å—Ç–∏—Ç–∏, —â–æ –ù–∞—Ç–∞–ª—è —Å–ø–æ–∂–∏–≤–∞—î ~80% –∫–∞–ª–æ—Ä—ñ–π –≤—ñ–¥ –ü–∞–≤–ª–∞:
        filtered_menu['–ö–∞–ª–æ—Ä—ñ—ó (–ù–∞—Ç–∞–ª—è)'] = (filtered_menu['–ö–∞–ª–æ—Ä—ñ—ó (–ü–∞–≤–ª–æ)'] * 0.8).astype(int)

        # –í—ñ–¥–æ–±—Ä–∞–∂–µ–Ω–Ω—è –º–µ–Ω—é
        if filtered_menu.empty:
            st.info("–ù–µ–º–∞—î –¥–∞–Ω–∏—Ö –Ω–∞ —Ü–µ–π –¥–µ–Ω—å/–¥–∞—Ç—É.")
        else:
            for idx, row in filtered_menu.iterrows():
                st.write(f"**{row['–ß–∞—Å –ø—Ä–∏–π–æ–º—É —ó–∂—ñ']}**")
                st.write(f"- –†–µ—Ü–µ–ø—Ç: {row['–°—Ç—Ä–∞–≤–∞ (—Ä–µ—Ü–µ–ø—Ç, –∫–∞–ª–æ—Ä—ñ—ó, —Ç–µ—Ö–∫–∞—Ä—Ç–∞)']}")
                st.write(f"- –ü–∞–≤–ª–æ: {row['–ü–æ—Ä—Ü—ñ—è –¥–ª—è —á–æ–ª–æ–≤—ñ–∫–∞']} ({row['–ö–∞–ª–æ—Ä—ñ—ó (–ü–∞–≤–ª–æ)']} –∫–∫–∞–ª)")
                st.write(f"- –ù–∞—Ç–∞–ª—è: {row['–ü–æ—Ä—Ü—ñ—è –¥–ª—è –¥—Ä—É–∂–∏–Ω–∏']} ({row['–ö–∞–ª–æ—Ä—ñ—ó (–ù–∞—Ç–∞–ª—è)']} –∫–∫–∞–ª)")
                st.write("---")

            # –î–≤–∞ –≥—Ä–∞—Ñ—ñ–∫–∏ –∫–∞–ª–æ—Ä—ñ–π–Ω–æ—Å—Ç—ñ
            colA, colB = st.columns(2)
            with colA:
                st.write("#### –ö–∞–ª–æ—Ä—ñ–π–Ω—ñ—Å—Ç—å (–ü–∞–≤–ª–æ)")
                st.bar_chart(filtered_menu.set_index('–ß–∞—Å –ø—Ä–∏–π–æ–º—É —ó–∂—ñ')['–ö–∞–ª–æ—Ä—ñ—ó (–ü–∞–≤–ª–æ)'])
            with colB:
                st.write("#### –ö–∞–ª–æ—Ä—ñ–π–Ω—ñ—Å—Ç—å (–ù–∞—Ç–∞–ª—è)")
                st.bar_chart(filtered_menu.set_index('–ß–∞—Å –ø—Ä–∏–π–æ–º—É —ó–∂—ñ')['–ö–∞–ª–æ—Ä—ñ—ó (–ù–∞—Ç–∞–ª—è)'])

        # --- (B) –ê–≤—Ç–æ–º–∞—Ç–∏—á–Ω–∏–π —Å–ø–∏—Å–æ–∫ –ø–æ–∫—É–ø–æ–∫ ---
        st.markdown("### –ê–≤—Ç–æ–º–∞—Ç–∏—á–Ω–∏–π —Å–ø–∏—Å–æ–∫ –ø–æ–∫—É–ø–æ–∫")

        # –í–∏–±–∏—Ä–∞—î–º–æ –ø–µ—Ä—ñ–æ–¥, –Ω–∞ —Å–∫—ñ–ª—å–∫–∏ –¥–Ω—ñ–≤ —Ñ–æ—Ä–º—É–≤–∞—Ç–∏ —Å–ø–∏—Å–æ–∫ (–≤—ñ–¥ 1 –¥–æ 7)
        days_count = st.slider("–ù–∞ —Å–∫—ñ–ª—å–∫–∏ –¥–Ω—ñ–≤ –≤–ø–µ—Ä–µ–¥ –∑–≥–µ–Ω–µ—Ä—É–≤–∞—Ç–∏ —Å–ø–∏—Å–æ–∫ –ø–æ–∫—É–ø–æ–∫?", 1, 7, 1)

        # –î–ª—è —Å–ø—Ä–æ—â–µ–Ω–Ω—è —É –ø—Ä–∏–∫–ª–∞–¥—ñ: —è–∫—â–æ —É CSV `–î–Ω—ñ` - —Ü–µ –Ω–∞–∑–≤–∏ ("–ü–æ–Ω–µ–¥—ñ–ª–æ–∫", "–í—ñ–≤—Ç–æ—Ä–æ–∫"...),
        # —Ç–æ "–∫—ñ–ª—å–∫–∞ –¥–Ω—ñ–≤ —É–ø–µ—Ä–µ–¥" - —Ü–µ —É–º–æ–≤–Ω–∞ –æ–ø–µ—Ä–∞—Ü—ñ—è.
        # –Ø–∫—â–æ —É CSV —î —Ä–µ–∞–ª—å–Ω—ñ –¥–∞—Ç–∏, –º–∏ –º–æ–∂–µ–º–æ —ñ–Ω—Ç–µ—Ä–ø—Ä–µ—Ç—É–≤–∞—Ç–∏ date + days_count.

        # (–î–µ–º–æ) –í–∏–±–µ—Ä–µ–º–æ —ñ–Ω–¥–µ–∫—Å –ø–æ—Ç–æ—á–Ω–æ–≥–æ –¥–Ω—è/–¥–∞—Ç–∏ —É —Å–ø–∏—Å–∫—É unique_days:
        if day_or_date in unique_days:
            current_index = unique_days.index(day_or_date)
            # –í–∏–±—ñ—Ä –Ω–∞—Å—Ç—É–ø–Ω–∏—Ö N –¥–Ω—ñ–≤
            selected_days = []
            for i in range(days_count):
                new_index = current_index + i
                if new_index < len(unique_days):
                    selected_days.append(unique_days[new_index])
                else:
                    break
        else:
            selected_days = [day_or_date]

        # –ó–±–µ—Ä–µ–º–æ –≤—Å—ñ —Ä—è–¥–∫–∏ –º–µ–Ω—é, —è–∫—ñ –ø–æ—Ç—Ä–∞–ø–ª—è—é—Ç—å —É –≤–∏–±—Ä–∞–Ω—ñ –¥–Ω—ñ
        selected_menu = menu_df[menu_df['–î–Ω—ñ'].isin(selected_days)]

        # –Ü–¥–µ—è: –Ω–∞–º –ø–æ—Ç—Ä—ñ–±–Ω–æ –∞–Ω–∞–ª—ñ–∑—É–≤–∞—Ç–∏ "–ü–æ—Ä—Ü—ñ—è –¥–ª—è —á–æ–ª–æ–≤—ñ–∫–∞" —Ç–∞ "–ü–æ—Ä—Ü—ñ—è –¥–ª—è –¥—Ä—É–∂–∏–Ω–∏"
        # –π "–°—Ç—Ä–∞–≤–∞ (—Ä–µ—Ü–µ–ø—Ç, –∫–∞–ª–æ—Ä—ñ—ó, —Ç–µ—Ö–∫–∞—Ä—Ç–∞)", —â–æ–± –∑–Ω–∞–π—Ç–∏ —ñ–Ω–≥—Ä–µ–¥—ñ—î–Ω—Ç–∏.
        # –î–æ–ø—É—Å—Ç—ñ–º–æ, —â–æ —É —Ä—è–¥–∫—É —î —Ñ—Ä–∞–≥–º–µ–Ω—Ç–∏ –Ω–∞ –∑—Ä–∞–∑–æ–∫: "–ú–æ–ª–æ–∫–æ 200 –º–ª", "–Ø–π—Ü—è 2 —à—Ç", ...
        # –¶–µ –î–ï–ú–û–û–ë–†–û–ë–ö–ê: —à—É–∫–∞—î–º–æ –ø–∞—Ç–µ—Ä–Ω "<–ù–∞–∑–≤–∞> <–∫—ñ–ª—å–∫—ñ—Å—Ç—å> (–≥|—à—Ç|–º–ª)"
        # –î–ª—è —Ä–µ–∞–ª—å–Ω–æ–≥–æ –∑–∞—Å—Ç–æ—Å—É–≤–∞–Ω–Ω—è —Ñ–æ—Ä–º–∞—Ç CSV –º–∞—î –±—É—Ç–∏ –∂–æ—Ä—Å—Ç–∫–æ —Å—Ç–∞–Ω–¥–∞—Ä—Ç–∏–∑–æ–≤–∞–Ω–∏–π.

        def parse_ingredients(text):
            """
            –®—É–∫–∞—î –ø–∞—Ç–µ—Ä–Ω–∏ —Ç–∏–ø—É '–ü—Ä–æ–¥—É–∫—Ç_–°–ª–æ–≤–æ 123 —à—Ç/–≥/–º–ª'.
            –ü–æ–≤–µ—Ä—Ç–∞—î —Å–ø–∏—Å–æ–∫ –∫–æ—Ä—Ç–µ–∂—ñ–≤ [('–ü—Ä–æ–¥—É–∫—Ç', 123, '—à—Ç'), ...]
            """
            # –û—Å—å –ø—Ä–æ—Å—Ç–∏–π –ø—Ä–∏–∫–ª–∞–¥ –ø–æ—à—É–∫—É (—É–∫—Ä.+–∞–Ω–≥–ª. –ª—ñ—Ç–µ—Ä–∏, —Ü–∏—Ñ—Ä–∏ + –æ–¥–∏–Ω–∏—Ü—ñ).
            pattern = r'([–ê-–Ø–∞-—è–á—ó–Ü—ñ–Ñ—î“ê“ëA-Za-z0-9]+)\s(\d+)\s?(—à—Ç|–≥|–º–ª|kg|–≥—Ä|–∫–≥)?'
            found = re.findall(pattern, text)
            # found = [('–Ø–π—Ü—è', '2', '—à—Ç'), ('–ú–æ–ª–æ–∫–æ', '200', '–º–ª'), ...]
            # –ü—Ä–∏–≤–µ–¥–µ–º–æ –∫—ñ–ª—å–∫—ñ—Å—Ç—å –¥–æ int
            results = []
            for f in found:
                product_name = f[0]
                qty = int(f[1])
                unit = f[2] if f[2] else ''  # —è–∫—â–æ –æ–¥–∏–Ω–∏—Ü—è –ø—É—Å—Ç–∞
                results.append((product_name, qty, unit))
            return results
        
        # –ó–±–∏—Ä–∞—î–º–æ —ñ–Ω–≥—Ä–µ–¥—ñ—î–Ω—Ç–∏ –∑ —É—Å—ñ—Ö —Å—Ç–æ–≤–ø—Ü—ñ–≤, –¥–µ –º–æ–∂–µ –±—É—Ç–∏ —Ç–µ–∫—Å—Ç –ø–æ—Ä—Ü—ñ–π
        # (–∑ —Ä–µ—Ü–µ–ø—Ç—É, –∑ –ø–æ—Ä—Ü—ñ—ó –¥–ª—è —á–æ–ª–æ–≤—ñ–∫–∞, –∑ –ø–æ—Ä—Ü—ñ—ó –¥–ª—è –¥—Ä—É–∂–∏–Ω–∏)
        all_ingredients = {}

        for _, row in selected_menu.iterrows():
            # –û–±—Ä–æ–±–∫–∞ —Ä–µ—Ü–µ–ø—Ç—É
            ing_recipe = parse_ingredients(str(row['–°—Ç—Ä–∞–≤–∞ (—Ä–µ—Ü–µ–ø—Ç, –∫–∞–ª–æ—Ä—ñ—ó, —Ç–µ—Ö–∫–∞—Ä—Ç–∞)']))
            # –û–±—Ä–æ–±–∫–∞ –ø–æ—Ä—Ü—ñ—ó –¥–ª—è —á–æ–ª–æ–≤—ñ–∫–∞
            ing_man = parse_ingredients(str(row['–ü–æ—Ä—Ü—ñ—è –¥–ª—è —á–æ–ª–æ–≤—ñ–∫–∞']))
            # –û–±—Ä–æ–±–∫–∞ –ø–æ—Ä—Ü—ñ—ó –¥–ª—è –¥—Ä—É–∂–∏–Ω–∏
            ing_woman = parse_ingredients(str(row['–ü–æ—Ä—Ü—ñ—è –¥–ª—è –¥—Ä—É–∂–∏–Ω–∏']))
            combined = ing_recipe + ing_man + ing_woman
            
            for (name, qty, unit) in combined:
                key = (name.lower(), unit.lower())  # –∫–ª—é—á –¥–ª—è —É–Ω—ñ–∫–∞–ª—å–Ω–æ–≥–æ –ø—Ä–æ–¥—É–∫—Ç—É+–æ–¥–∏–Ω–∏—Ü—ñ
                if key not in all_ingredients:
                    all_ingredients[key] = 0
                all_ingredients[key] += qty

        if st.button("–ó–≥–µ–Ω–µ—Ä—É–≤–∞—Ç–∏ —Å–ø–∏—Å–æ–∫ –ø–æ–∫—É–ø–æ–∫"):
            if not all_ingredients:
                st.warning("–ù–µ –≤–¥–∞–ª–æ—Å—è –∑–Ω–∞–π—Ç–∏ –ø—Ä–æ–¥—É–∫—Ç–∏ —É –º–µ–Ω—é. –ü–µ—Ä–µ–≤—ñ—Ä—Ç–µ —Ñ–æ—Ä–º–∞—Ç –¥–∞–Ω–∏—Ö.")
            else:
                st.success("–°–ø–∏—Å–æ–∫ –ø–æ–∫—É–ø–æ–∫ —Å—Ñ–æ—Ä–º–æ–≤–∞–Ω–æ!")
                shop_list = []
                for (name_unit, total_qty) in all_ingredients.items():
                    product_name, product_unit = name_unit
                    if product_unit == '':
                        product_unit = '—à—Ç'  # —É–º–æ–≤–Ω–æ, —è–∫—â–æ –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ
                    shop_list.append((product_name.capitalize(), total_qty, product_unit))
                
                df_shop = pd.DataFrame(shop_list, columns=['–ü—Ä–æ–¥—É–∫—Ç', '–ö—ñ–ª—å–∫—ñ—Å—Ç—å', '–û–¥.'])
                st.dataframe(df_shop)

    # ===================== 2. –ñ–£–†–ù–ê–õ –í–ê–ì–ò –¢–ê –ê–ö–¢–ò–í–ù–û–°–¢–Ü =======================
    with tabs[1]:
        st.subheader("–ñ—É—Ä–Ω–∞–ª –≤–∞–≥–∏ —Ç–∞ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—ñ")

        # –§–æ—Ä–º–∞ –¥–æ–¥–∞–≤–∞–Ω–Ω—è –Ω–æ–≤–æ–≥–æ –∑–∞–ø–∏—Å—É
        today = datetime.date.today()
        col1, col2, col3 = st.columns(3)
        with col1:
            date_input = st.date_input("–î–∞—Ç–∞:", today)
        with col2:
            weight_input = st.number_input("–í–∞–≥–∞ (–∫–≥):", 30.0, 300.0, 70.0)
        with col3:
            activity_input = st.slider("–ê–∫—Ç–∏–≤–Ω—ñ—Å—Ç—å (—Ö–≤/–¥–µ–Ω—å):", 0, 300, 30, 10)

        if st.button("–î–æ–¥–∞—Ç–∏ –∑–∞–ø–∏—Å"):
            add_log(user_id, date_input, weight_input, activity_input)
            st.success("–ó–∞–ø–∏—Å —É—Å–ø—ñ—à–Ω–æ –¥–æ–¥–∞–Ω–æ!")

        # –ü–æ–∫–∞–∑—É—î–º–æ –ø–æ—Ç–æ—á–Ω—ñ –ª–æ–≥–∏
        logs_df = get_logs(user_id)
        if logs_df.empty:
            st.info("–ü–æ–∫–∏ —â–æ –Ω–µ–º–∞—î –∑–∞–ø–∏—Å—ñ–≤ —É –∂—É—Ä–Ω–∞–ª—ñ.")
        else:
            st.dataframe(logs_df)

            # –ì—Ä–∞—Ñ—ñ–∫ –≤–∞–≥–∏ (–ª—ñ–Ω—ñ–π–Ω–∏–π)
            st.line_chart(data=logs_df.set_index('–î–∞—Ç–∞')['–í–∞–≥–∞'])
            # –ì—Ä–∞—Ñ—ñ–∫ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—ñ (—Å—Ç–æ–≤–ø—á–∏–∫–æ–≤–∏–π)
            st.bar_chart(data=logs_df.set_index('–î–∞—Ç–∞')['–ê–∫—Ç–∏–≤–Ω—ñ—Å—Ç—å'])

    # ===================== 3. –ü–£–®-–ù–ê–ì–ê–î–£–í–ê–ù–ù–Ø (–î–ï–ú–û) =========================
    with tabs[2]:
        st.subheader("–ù–∞–≥–∞–¥—É–≤–∞–Ω–Ω—è –ø—Ä–æ –ø—Ä–∏–π–æ–º–∏ —ó–∂—ñ (–¥–µ–º–æ)")
        st.write("**–£–≤–∞–≥–∞:** –¥–ª—è —Ä–µ–∞–ª—å–Ω–∏—Ö push-–ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω—å –ø–æ—Ç—Ä—ñ–±–µ–Ω –∑–æ–≤–Ω—ñ—à–Ω—ñ–π —Å–µ—Ä–≤—ñ—Å (Firebase, Telegram-–±–æ—Ç —Ç–æ—â–æ).")

        # –í–∏–≤–µ–¥–µ–º–æ —Ç–∞–±–ª–∏—Ü—é —ñ—Å–Ω—É—é—á–∏—Ö –Ω–∞–≥–∞–¥—É–≤–∞–Ω—å
        reminders_df = get_reminders(user_id)
        if not reminders_df.empty:
            st.dataframe(reminders_df)
            # –î–æ–¥–∞–≤–∞–Ω–Ω—è –º–æ–∂–ª–∏–≤–æ—Å—Ç—ñ –≤–∏–¥–∞–ª—è—Ç–∏ –Ω–∞–≥–∞–¥—É–≤–∞–Ω–Ω—è
            reminder_to_delete = st.selectbox("ID –Ω–∞–≥–∞–¥—É–≤–∞–Ω–Ω—è –¥–ª—è –≤–∏–¥–∞–ª–µ–Ω–Ω—è:", [0] + reminders_df['ID'].tolist())
            if reminder_to_delete != 0:
                if st.button("–í–∏–¥–∞–ª–∏—Ç–∏ –æ–±—Ä–∞–Ω–µ –Ω–∞–≥–∞–¥—É–≤–∞–Ω–Ω—è"):
                    delete_reminder(reminder_to_delete)
                    st.success("–ù–∞–≥–∞–¥—É–≤–∞–Ω–Ω—è –≤–∏–¥–∞–ª–µ–Ω–æ!")
                    st.experimental_rerun()
        else:
            st.info("–ù–µ–º–∞—î –∂–æ–¥–Ω–æ–≥–æ –Ω–∞–≥–∞–¥—É–≤–∞–Ω–Ω—è.")

        # –§–æ—Ä–º–∞ –¥–ª—è —Å—Ç–≤–æ—Ä–µ–Ω–Ω—è –Ω–∞–≥–∞–¥—É–≤–∞–Ω–Ω—è
        colA, colB = st.columns(2)
        with colA:
            reminder_time = st.time_input("–ß–∞—Å –Ω–∞–≥–∞–¥—É–≤–∞–Ω–Ω—è:", datetime.time(8, 0))
        with colB:
            message = st.text_input("–¢–µ–∫—Å—Ç –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è:", value="–ß–∞—Å —ó—Å—Ç–∏! üçΩÔ∏è")

        if st.button("–î–æ–¥–∞—Ç–∏ –Ω–∞–≥–∞–¥—É–≤–∞–Ω–Ω—è"):
            # –ó–±–µ—Ä–µ–∂–µ–º–æ –≤ –±–∞–∑—ñ
            add_reminder(user_id, str(reminder_time), message)
            st.success("–ù–∞–≥–∞–¥—É–≤–∞–Ω–Ω—è –¥–æ–¥–∞–Ω–æ!")
            st.experimental_rerun()

# –ó–∞–ø—É—Å–∫ –æ—Å–Ω–æ–≤–Ω–æ—ó —Ñ—É–Ω–∫—Ü—ñ—ó
if __name__ == "__main__":
    main()
