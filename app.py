import streamlit as st
import pandas as pd
import numpy as np
from datetime import datetime, timedelta

# –ö–æ–Ω—Ñ—ñ–≥—É—Ä–∞—Ü—ñ—è —Å—Ç–æ—Ä—ñ–Ω–∫–∏
st.set_page_config(page_title='–ú–µ–Ω—é —Ö–∞—Ä—á—É–≤–∞–Ω–Ω—è', layout='wide')

# –í–∏–±—ñ—Ä —Ç–µ–º–∏
st.sidebar.header('–ù–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è')
theme = st.sidebar.radio('üåó –û–±–µ—Ä–∏ —Ç–µ–º—É:', ['–°–≤—ñ—Ç–ª–∞', '–¢–µ–º–Ω–∞'])
if theme == '–¢–µ–º–Ω–∞':
    st.markdown("""
    <style>
        .main {background-color: #0e1117; color: white;}
    </style>
    """, unsafe_allow_html=True)

# –ó–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è –º–µ–Ω—é
menu = pd.read_csv('–•–∞—Ä—á—É–≤–∞–Ω–Ω—è.csv', encoding='utf-8-sig').dropna()

st.title('üçΩÔ∏è –ú–µ–Ω—é –¥–ª—è –ü–∞–≤–ª–∞ —Ç–∞ –ù–∞—Ç–∞–ª—ñ üìÖ')

# –í–∏–±—ñ—Ä –¥–Ω—è —Ç–∏–∂–Ω—è
selected_day = st.selectbox('üìÖ –î–µ–Ω—å —Ç–∏–∂–Ω—è:', menu['–î–Ω—ñ'].unique())

# –§—ñ–ª—å—Ç—Ä–∞—Ü—ñ—è –º–µ–Ω—é
filtered_menu = menu[menu['–î–Ω—ñ'].str.lower() == selected_day.lower()]

# –§—É–Ω–∫—Ü—ñ—è –¥–ª—è –≤–∏—Ç—è–≥—É–≤–∞–Ω–Ω—è –∫–∞–ª–æ—Ä—ñ–π
def extract_calories(text):
    import re
    matches = re.findall(r'(\d+)\s?–∫–∫–∞–ª', text)
    return sum(map(int, matches)) if matches else 0

filtered_menu['–ö–∞–ª–æ—Ä—ñ—ó (–ü–∞–≤–ª–æ)'] = filtered_menu['–°—Ç—Ä–∞–≤–∞ (—Ä–µ—Ü–µ–ø—Ç, –∫–∞–ª–æ—Ä—ñ—ó, —Ç–µ—Ö–∫–∞—Ä—Ç–∞)'].apply(extract_calories)
filtered_menu['–ö–∞–ª–æ—Ä—ñ—ó (–ù–∞—Ç–∞–ª—è)'] = (filtered_menu['–ö–∞–ª–æ—Ä—ñ—ó (–ü–∞–≤–ª–æ)'] * 0.8).astype(int)

# –í—ñ–¥–æ–±—Ä–∞–∂–µ–Ω–Ω—è –º–µ–Ω—é –∑ —Ñ–æ—Ç–æ
for _, row in filtered_menu.iterrows():
    emoji = 'üç≥' if '–°–Ω—ñ–¥–∞–Ω–æ–∫' in row['–ß–∞—Å –ø—Ä–∏–π–æ–º—É —ó–∂—ñ'] else ('üç≤' if '–û–±—ñ–¥' in row['–ß–∞—Å –ø—Ä–∏–π–æ–º—É —ó–∂—ñ'] else 'ü•ó')
    with st.expander(f"{emoji} {row['–ß–∞—Å –ø—Ä–∏–π–æ–º—É —ó–∂—ñ']}"):
        st.write(f"**–†–µ—Ü–µ–ø—Ç:** {row['–°—Ç—Ä–∞–≤–∞ (—Ä–µ—Ü–µ–ø—Ç, –∫–∞–ª–æ—Ä—ñ—ó, —Ç–µ—Ö–∫–∞—Ä—Ç–∞)']}")
        st.write(f"**–ü–∞–≤–ª–æ:** {row['–ü–æ—Ä—Ü—ñ—è –¥–ª—è —á–æ–ª–æ–≤—ñ–∫–∞']} ({row['–ö–∞–ª–æ—Ä—ñ—ó (–ü–∞–≤–ª–æ)']} –∫–∫–∞–ª)")
        st.write(f"**–ù–∞—Ç–∞–ª—è:** {row['–ü–æ—Ä—Ü—ñ—è –¥–ª—è –¥—Ä—É–∂–∏–Ω–∏']} ({row['–ö–∞–ª–æ—Ä—ñ—ó (–ù–∞—Ç–∞–ª—è)']} –∫–∫–∞–ª)")
        photo = st.file_uploader(f'–ó–∞–≤–∞–Ω—Ç–∞–∂ —Ñ–æ—Ç–æ —Å—Ç—Ä–∞–≤–∏ ({row["–ß–∞—Å –ø—Ä–∏–π–æ–º—É —ó–∂—ñ"]})', type=['png', 'jpg'])
        if photo:
            st.image(photo)

# –û–∫—Ä–µ–º—ñ –≥—Ä–∞—Ñ—ñ–∫–∏ –∫–∞–ª–æ—Ä—ñ–π–Ω–æ—Å—Ç—ñ
col1, col2 = st.columns(2)
with col1:
    st.subheader('üìä –ü–∞–≤–ª–æ')
    st.bar_chart(filtered_menu.set_index('–ß–∞—Å –ø—Ä–∏–π–æ–º—É —ó–∂—ñ')['–ö–∞–ª–æ—Ä—ñ—ó (–ü–∞–≤–ª–æ)'])

with col2:
    st.subheader('üìä –ù–∞—Ç–∞–ª—è')
    st.bar_chart(filtered_menu.set_index('–ß–∞—Å –ø—Ä–∏–π–æ–º—É —ó–∂—ñ')['–ö–∞–ª–æ—Ä—ñ—ó (–ù–∞—Ç–∞–ª—è)'])

# –ö–∞–ª—å–∫—É–ª—è—Ç–æ—Ä –Ü–ú–¢
st.sidebar.header('üßÆ –ö–∞–ª—å–∫—É–ª—è—Ç–æ—Ä –Ü–ú–¢')
weight = st.sidebar.number_input('–í–∞–≥–∞ (–∫–≥):', 30.0, 200.0, 80.0)
height = st.sidebar.number_input('–ó—Ä—ñ—Å—Ç (—Å–º):', 100, 220, value=173)
bmi = weight / ((height / 100)**2)
st.sidebar.metric('üìå –¢–≤—ñ–π –Ü–ú–¢:', f'{bmi:.2f}')

# –ñ—É—Ä–Ω–∞–ª –≤–∞–≥–∏ —Ç–∞ —Ñ—ñ–∑–∏—á–Ω–æ—ó –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—ñ
st.header('üìù –ñ—É—Ä–Ω–∞–ª –≤–∞–≥–∏ —Ç–∞ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—ñ')

if 'log_df' not in st.session_state:
    st.session_state['log_df'] = pd.DataFrame(columns=['–î–∞—Ç–∞', '–í–∞–≥–∞', '–ê–∫—Ç–∏–≤–Ω—ñ—Å—Ç—å'])

col1, col2, col3 = st.columns(3)
with col1:
    date = st.date_input('üìÖ –î–∞—Ç–∞')

with col2:
    weight_log = st.number_input('‚öñÔ∏è –í–∞–≥–∞ (–∫–≥)', 30.0, 200.0, step=0.1)

with col3:
    activity_log = st.slider('üèÉ‚Äç‚ôÇÔ∏è –ê–∫—Ç–∏–≤–Ω—ñ—Å—Ç—å (—Ö–≤)', 0, 180, 30, 10)

if st.button('‚úÖ –î–æ–¥–∞—Ç–∏ –∑–∞–ø–∏—Å'):
    new_log = pd.DataFrame([{
        '–î–∞—Ç–∞': pd.to_datetime(date),
        '–í–∞–≥–∞': weight_log,
        '–ê–∫—Ç–∏–≤–Ω—ñ—Å—Ç—å': activity_log
    }])
    st.session_state.log_df = pd.concat([st.session_state.log_df, new_log], ignore_index=True)
    st.success('–ó–∞–ø–∏—Å –¥–æ–¥–∞–Ω–æ!')

# –ü–æ–∫–∞–∑—É—î–º–æ –∑–∞–ø–∏—Å–∏
if not st.session_state.log_df.empty:
    st.dataframe(st.session_state.log_df)
    st.line_chart(st.session_state.log_df.set_index('–î–∞—Ç–∞')['–í–∞–≥–∞'])
    st.bar_chart(st.session_state.log_df.set_index('–î–∞—Ç–∞')['–ê–∫—Ç–∏–≤–Ω—ñ—Å—Ç—å'])

# –°–ø–∏—Å–æ–∫ –ø–æ–∫—É–ø–æ–∫
st.header('üõí –ê–≤—Ç–æ–º–∞—Ç–∏—á–Ω–∏–π —Å–ø–∏—Å–æ–∫ –ø–æ–∫—É–ø–æ–∫ –Ω–∞ —Ç–∏–∂–¥–µ–Ω—å')
if st.button('üìù –°—Ç–≤–æ—Ä–∏—Ç–∏ —Å–ø–∏—Å–æ–∫ –ø–æ–∫—É–ø–æ–∫'):
    products = filtered_menu['–°—Ç—Ä–∞–≤–∞ (—Ä–µ—Ü–µ–ø—Ç, –∫–∞–ª–æ—Ä—ñ—ó, —Ç–µ—Ö–∫–∞—Ä—Ç–∞)'].str.extractall(r'([–ê-–Ø–∞-—è–á—ó–Ü—ñ–Ñ—î“ê“ë\w]+) \d+ ?–≥?').drop_duplicates()[0]
    st.write(products.tolist())

# Push-—Å–ø–æ–≤—ñ—â–µ–Ω–Ω—è
st.sidebar.header('üîî Push-—Å–ø–æ–≤—ñ—â–µ–Ω–Ω—è –ø—Ä–æ –ø—Ä–∏–π–æ–º–∏ —ó–∂—ñ')
notify = st.sidebar.checkbox('–ê–∫—Ç–∏–≤—É–≤–∞—Ç–∏ –Ω–∞–≥–∞–¥—É–≤–∞–Ω–Ω—è')
if notify:
    meal_times = filtered_menu['–ß–∞—Å –ø—Ä–∏–π–æ–º—É —ó–∂—ñ'].tolist()
    for time in meal_times:
        st.sidebar.info(f'–ù–µ –∑–∞–±—É–¥—å –ø—Ä–æ {time}!')
