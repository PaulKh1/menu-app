import streamlit as st
import pandas as pd
import sqlite3
import hashlib
import re

# –ö–æ–Ω—Ñ—ñ–≥—É—Ä–∞—Ü—ñ—è —Å—Ç–æ—Ä—ñ–Ω–∫–∏
st.set_page_config(page_title='–ú–µ–Ω—é —Ö–∞—Ä—á—É–≤–∞–Ω–Ω—è', layout='wide')

# –ü—ñ–¥–∫–ª—é—á–µ–Ω–Ω—è –¥–æ –±–∞–∑–∏ –¥–∞–Ω–∏—Ö
conn = sqlite3.connect('menu_app.db')
c = conn.cursor()

# –°—Ç–≤–æ—Ä–µ–Ω–Ω—è —Ç–∞–±–ª–∏—Ü—å (—è–∫—â–æ —ó—Ö –Ω–µ–º–∞—î)
c.execute('''CREATE TABLE IF NOT EXISTS users (username TEXT UNIQUE, password TEXT)''')
c.execute('''CREATE TABLE IF NOT EXISTS logs (user TEXT, date DATE, weight REAL, activity INTEGER)''')
conn.commit()

# –§—É–Ω–∫—Ü—ñ—ó –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—ñ–≤
def hash_password(password):
    return hashlib.sha256(password.encode()).hexdigest()

def create_user(username, password):
    c.execute('SELECT username FROM users WHERE username = ?', (username,))
    if c.fetchone():
        return False
    hashed_password = hash_password(password)
    c.execute('INSERT INTO users VALUES (?, ?)', (username, hashed_password))
    conn.commit()
    return True

def login(username, password):
    hashed_password = hash_password(password)
    c.execute('SELECT * FROM users WHERE username=? AND password=?', (username, hashed_password))
    return c.fetchone()

# –ê–≤—Ç–æ—Ä–∏–∑–∞—Ü—ñ—è —Ç–∞ —Ä–µ—î—Å—Ç—Ä–∞—Ü—ñ—è
st.sidebar.header('üîê –ê–≤—Ç–æ—Ä–∏–∑–∞—Ü—ñ—è')
login_mode = st.sidebar.radio('–û–±–µ—Ä—ñ—Ç—å –¥—ñ—é:', ['–í—Ö—ñ–¥', '–†–µ—î—Å—Ç—Ä–∞—Ü—ñ—è'])
username = st.sidebar.text_input("–Ü–º'—è –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞:")
password = st.sidebar.text_input('–ü–∞—Ä–æ–ª—å:', type='password')

if st.sidebar.button('–£–≤—ñ–π—Ç–∏' if login_mode == '–í—Ö—ñ–¥' else '–ó–∞—Ä–µ—î—Å—Ç—Ä—É–≤–∞—Ç–∏—Å—è'):
    if login_mode == '–í—Ö—ñ–¥':
        if login(username, password):
            st.sidebar.success(f'–í—Ö—ñ–¥ —É—Å–ø—ñ—à–Ω–∏–π: {username}')
            st.session_state['user'] = username
        else:
            st.sidebar.error('–ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω–∏–π –ª–æ–≥—ñ–Ω –∞–±–æ –ø–∞—Ä–æ–ª—å')
    else:
        if create_user(username, password):
            st.sidebar.success(f'–ö–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ {username} –∑–∞—Ä–µ—î—Å—Ç—Ä–æ–≤–∞–Ω–æ —É—Å–ø—ñ—à–Ω–æ!')
            st.session_state['user'] = username
        else:
            st.sidebar.error('–ö–æ—Ä–∏—Å—Ç—É–≤–∞—á –∑ —Ç–∞–∫–∏–º —ñ–º–µ–Ω–µ–º –≤–∂–µ —ñ—Å–Ω—É—î!')


    # –ó–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è –º–µ–Ω—é
    menu = pd.read_csv('–•–∞—Ä—á—É–≤–∞–Ω–Ω—è.csv', encoding='utf-8-sig').dropna()

    selected_day = st.selectbox('üìÖ –î–µ–Ω—å —Ç–∏–∂–Ω—è:', menu['–î–Ω—ñ'].unique())
    filtered_menu = menu[menu['–î–Ω—ñ'].str.lower() == selected_day.lower()]

    def extract_calories(text):
        return sum(map(int, re.findall(r'(\d+)\s?–∫–∫–∞–ª', text)))

    filtered_menu['–ö–∞–ª–æ—Ä—ñ—ó (–ü–∞–≤–ª–æ)'] = filtered_menu['–°—Ç—Ä–∞–≤–∞ (—Ä–µ—Ü–µ–ø—Ç, –∫–∞–ª–æ—Ä—ñ—ó, —Ç–µ—Ö–∫–∞—Ä—Ç–∞)'].apply(extract_calories)
    filtered_menu['–ö–∞–ª–æ—Ä—ñ—ó (–ù–∞—Ç–∞–ª—è)'] = (filtered_menu['–ö–∞–ª–æ—Ä—ñ—ó (–ü–∞–≤–ª–æ)'] * 0.8).astype(int)

    # –í—ñ–¥–æ–±—Ä–∞–∂–µ–Ω–Ω—è –º–µ–Ω—é
    for _, row in filtered_menu.iterrows():
        with st.expander(f"‚è∞ {row['–ß–∞—Å –ø—Ä–∏–π–æ–º—É —ó–∂—ñ']}"):
            st.write(f"üìñ {row['–°—Ç—Ä–∞–≤–∞ (—Ä–µ—Ü–µ–ø—Ç, –∫–∞–ª–æ—Ä—ñ—ó, —Ç–µ—Ö–∫–∞—Ä—Ç–∞)']}")
            st.write(f"üçΩÔ∏è –ü–∞–≤–ª–æ: {row['–ü–æ—Ä—Ü—ñ—è –¥–ª—è —á–æ–ª–æ–≤—ñ–∫–∞']} ({row['–ö–∞–ª–æ—Ä—ñ—ó (–ü–∞–≤–ª–æ)']} –∫–∫–∞–ª)")
            st.write(f"üçΩÔ∏è –ù–∞—Ç–∞–ª—è: {row['–ü–æ—Ä—Ü—ñ—è –¥–ª—è –¥—Ä—É–∂–∏–Ω–∏']} ({row['–ö–∞–ª–æ—Ä—ñ—ó (–ù–∞—Ç–∞–ª—è)']} –∫–∫–∞–ª)")

    # –ñ—É—Ä–Ω–∞–ª –≤–∞–≥–∏ —Ç–∞ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—ñ
    st.subheader('üìù –ñ—É—Ä–Ω–∞–ª –≤–∞–≥–∏ —Ç–∞ —Ñ—ñ–∑–∏—á–Ω–æ—ó –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—ñ')

    date = st.date_input('üìÖ –î–∞—Ç–∞ –∑–∞–ø–∏—Å—É:')
    weight_log = st.number_input('‚öñÔ∏è –í–∞–≥–∞ (–∫–≥):', 30.0, 200.0, step=0.1)
    activity_log = st.slider('üèÉ‚Äç‚ôÇÔ∏è –ê–∫—Ç–∏–≤–Ω—ñ—Å—Ç—å (—Ö–≤):', 0, 180, 30)

    if st.button('‚ûï –î–æ–¥–∞—Ç–∏ –∑–∞–ø–∏—Å'):
        c.execute('INSERT INTO logs (user, date, weight, activity) VALUES (?, ?, ?, ?)', (username, date, weight_log, activity_log))
        conn.commit()
        st.success('‚úÖ –ó–∞–ø–∏—Å –¥–æ–¥–∞–Ω–æ!')

    # –í—ñ–¥–æ–±—Ä–∞–∂–µ–Ω–Ω—è –∂—É—Ä–Ω–∞–ª—É
    logs_df = pd.read_sql(f"SELECT date as '–î–∞—Ç–∞', weight as '–í–∞–≥–∞', activity as '–ê–∫—Ç–∏–≤–Ω—ñ—Å—Ç—å' FROM logs WHERE user=?", conn, params=(username,))
    if not logs_df.empty:
        st.dataframe(logs_df)
        st.line_chart(logs_df.set_index('–î–∞—Ç–∞')['–í–∞–≥–∞'])
        st.bar_chart(logs_df.set_index('–î–∞—Ç–∞')['–ê–∫—Ç–∏–≤–Ω—ñ—Å—Ç—å'])
else:
    st.info('–ë—É–¥—å –ª–∞—Å–∫–∞, –∞–≤—Ç–æ—Ä–∏–∑—É–π—Ç–µ—Å—å –∞–±–æ –∑–∞—Ä–µ—î—Å—Ç—Ä—É–π—Ç–µ—Å—å.')
