import streamlit as st
import pandas as pd
import numpy as np
import re

# –ö–æ–Ω—Ñ—ñ–≥—É—Ä–∞—Ü—ñ—è —Å—Ç–æ—Ä—ñ–Ω–∫–∏
st.set_page_config(page_title='–ú–µ–Ω—é —Ö–∞—Ä—á—É–≤–∞–Ω–Ω—è', layout='wide')

# –í–∏–±—ñ—Ä —Ç–µ–º–∏ (—Å–≤—ñ—Ç–ª–∞/—Ç–µ–º–Ω–∞)
theme = st.sidebar.radio('üåó –û–±–µ—Ä–∏ —Ç–µ–º—É:', ['–°–≤—ñ—Ç–ª–∞', '–¢–µ–º–Ω–∞'])

# –ó–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è –º–µ–Ω—é
menu = pd.read_csv('–•–∞—Ä—á—É–≤–∞–Ω–Ω—è.csv', encoding='utf-8-sig')
menu.dropna(inplace=True)

st.title('üçΩÔ∏è –ú–µ–Ω—é –¥–ª—è –ü–∞–≤–ª–∞ —Ç–∞ –ù–∞—Ç–∞–ª—ñ üìÖ')

# –í–∏–±—ñ—Ä –¥–Ω—è —Ç–∏–∂–Ω—è
selected_day = st.selectbox('üìÖ –î–µ–Ω—å —Ç–∏–∂–Ω—è:', menu['–î–Ω—ñ'].unique())

# –§—ñ–ª—å—Ç—Ä–∞—Ü—ñ—è –º–µ–Ω—é
filtered_menu = menu[menu['–î–Ω—ñ'].str.lower() == selected_day.lower()]

# –§—É–Ω–∫—Ü—ñ—è –≤–∏—Ç—è–≥—É–≤–∞–Ω–Ω—è –∫–∞–ª–æ—Ä—ñ–π
def extract_calories(text):
    matches = re.findall(r'(\d+)\s?–∫–∫–∞–ª', text)
    return sum(map(int, matches)) if matches else 0

filtered_menu['–ö–∞–ª–æ—Ä—ñ—ó (–ü–∞–≤–ª–æ)'] = filtered_menu['–°—Ç—Ä–∞–≤–∞ (—Ä–µ—Ü–µ–ø—Ç, –∫–∞–ª–æ—Ä—ñ—ó, —Ç–µ—Ö–∫–∞—Ä—Ç–∞)'].apply(extract_calories)
filtered_menu['–ö–∞–ª–æ—Ä—ñ—ó (–ù–∞—Ç–∞–ª—è)'] = (filtered_menu['–ö–∞–ª–æ—Ä—ñ—ó (–ü–∞–≤–ª–æ)'] * 0.8).astype(int)

# –í—ñ–¥–æ–±—Ä–∞–∂–µ–Ω–Ω—è –º–µ–Ω—é
for _, row in filtered_menu.iterrows():
    with st.expander(f"‚è∞ {row['–ß–∞—Å –ø—Ä–∏–π–æ–º—É —ó–∂—ñ']}"):
        st.write(f"**üìñ –†–µ—Ü–µ–ø—Ç:** {row['–°—Ç—Ä–∞–≤–∞ (—Ä–µ—Ü–µ–ø—Ç, –∫–∞–ª–æ—Ä—ñ—ó, —Ç–µ—Ö–∫–∞—Ä—Ç–∞)']}")
        st.write(f"üçΩÔ∏è **–ü–∞–≤–ª–æ:** {row['–ü–æ—Ä—Ü—ñ—è –¥–ª—è —á–æ–ª–æ–≤—ñ–∫–∞']} ({row['–ö–∞–ª–æ—Ä—ñ—ó (–ü–∞–≤–ª–æ)']} –∫–∫–∞–ª)")
        st.write(f"üçΩÔ∏è **–ù–∞—Ç–∞–ª—è:** {row['–ü–æ—Ä—Ü—ñ—è –¥–ª—è –¥—Ä—É–∂–∏–Ω–∏']} ({row['–ö–∞–ª–æ—Ä—ñ—ó (–ù–∞—Ç–∞–ª—è)']} –∫–∫–∞–ª)")

# –ì—Ä–∞—Ñ—ñ–∫–∏ –∫–∞–ª–æ—Ä—ñ–π–Ω–æ—Å—Ç—ñ
col1, col2 = st.columns(2)
with col1:
    st.subheader('üìä –ü–∞–≤–ª–æ')
    st.bar_chart(filtered_menu.set_index('–ß–∞—Å –ø—Ä–∏–π–æ–º—É —ó–∂—ñ')['–ö–∞–ª–æ—Ä—ñ—ó (–ü–∞–≤–ª–æ)'])

with col2:
    st.subheader('üìä –ù–∞—Ç–∞–ª—è')
    st.bar_chart(filtered_menu.set_index('–ß–∞—Å –ø—Ä–∏–π–æ–º—É —ó–∂—ñ')['–ö–∞–ª–æ—Ä—ñ—ó (–ù–∞—Ç–∞–ª—è)'])

# –Ü–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω–∏–π –∫–∞–ª—å–∫—É–ª—è—Ç–æ—Ä –Ü–ú–¢
st.sidebar.subheader('üßÆ –ö–∞–ª—å–∫—É–ª—è—Ç–æ—Ä –Ü–ú–¢')
weight = st.sidebar.number_input('–í–∞–≥–∞ (–∫–≥):', min_value=30.0, max_value=200.0, value=70.0)
height = st.sidebar.number_input('–ó—Ä—ñ—Å—Ç (—Å–º):', min_value=100, max_value=220, value=170)
bmi = weight / ((height / 100)**2)
st.sidebar.write(f'üßç –¢–≤—ñ–π –Ü–ú–¢: {bmi:.1f}')

# –ñ—É—Ä–Ω–∞–ª –≤–∞–≥–∏ —Ç–∞ —Ñ—ñ–∑–∏—á–Ω–æ—ó –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—ñ
st.header('üìù –ñ—É—Ä–Ω–∞–ª –≤–∞–≥–∏ —Ç–∞ —Ñ—ñ–∑–∏—á–Ω–æ—ó –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—ñ')

if 'log_df' not in st.session_state:
    st.session_state['log_df'] = pd.DataFrame(columns=['–î–∞—Ç–∞', '–í–∞–≥–∞', '–ê–∫—Ç–∏–≤–Ω—ñ—Å—Ç—å'])

date = st.date_input('üìÖ –î–∞—Ç–∞ –∑–∞–ø–∏—Å—É:')
weight_log = st.number_input('‚öñÔ∏è –í–∞–≥–∞ (–∫–≥):', 30.0, 200.0, step=0.1)
activity_log = st.slider('üèÉ‚Äç‚ôÇÔ∏è –§—ñ–∑–∏—á–Ω–∞ –∞–∫—Ç–∏–≤–Ω—ñ—Å—Ç—å (—Ö–≤/–¥–µ–Ω—å):', 0, 180, step=10)

if st.button('‚ûï –î–æ–¥–∞—Ç–∏ –∑–∞–ø–∏—Å'):
    new_record = {'–î–∞—Ç–∞': pd.to_datetime(date), '–í–∞–≥–∞': weight_log, '–ê–∫—Ç–∏–≤–Ω—ñ—Å—Ç—å': activity_log}
    st.session_state.log_df = pd.concat([st.session_state.log_df, pd.DataFrame([new_record])], ignore_index=True)
    st.success('‚úÖ –ó–∞–ø–∏—Å –¥–æ–¥–∞–Ω–æ!')

if not st.session_state.log_df.empty:
    st.dataframe(st.session_state.log_df)
    st.line_chart(st.session_state.log_df.set_index('–î–∞—Ç–∞')['–í–∞–≥–∞'])
    st.bar_chart(st.session_state.log_df.set_index('–î–∞—Ç–∞')['–ê–∫—Ç–∏–≤–Ω—ñ—Å—Ç—å'])

# –ê–≤—Ç–æ–º–∞—Ç–∏—á–Ω–∏–π —Å–ø–∏—Å–æ–∫ –ø–æ–∫—É–ø–æ–∫
st.subheader('üõí –ê–≤—Ç–æ–º–∞—Ç–∏—á–Ω–∏–π —Å–ø–∏—Å–æ–∫ –ø–æ–∫—É–ø–æ–∫')
days_selection = st.multiselect('üìÖ –û–±–µ—Ä–∏ –¥–Ω—ñ –¥–ª—è —Å–ø–∏—Å–∫—É –ø–æ–∫—É–ø–æ–∫:', menu['–î–Ω—ñ'].unique(), default=[selected_day])
if st.button('üìù –°—Ñ–æ—Ä–º—É–≤–∞—Ç–∏ —Å–ø–∏—Å–æ–∫ –ø–æ–∫—É–ø–æ–∫'):
    selected_days_menu = menu[menu['–î–Ω—ñ'].isin(days_selection)]
    all_ingredients = ' '.join(selected_days_menu['–°—Ç—Ä–∞–≤–∞ (—Ä–µ—Ü–µ–ø—Ç, –∫–∞–ª–æ—Ä—ñ—ó, —Ç–µ—Ö–∫–∞—Ä—Ç–∞)'])
    products = re.findall(r'([–ê-–Ø–∞-—è–á—ó–Ü—ñ–Ñ—î“ê“ë\w]+)\s(\d+)\s?(–≥|—à—Ç)', all_ingredients)
    shopping_list = {}
    for product, amount, unit in products:
        key = f'{product} ({unit})'
        shopping_list[key] = shopping_list.get(key, 0) + int(amount)
    for product, total in shopping_list.items():
        st.write(f'- {product}: {total}')
