import streamlit as st
import pandas as pd
import sqlite3
import hashlib
import re

# –ö–æ–Ω—Ñ—ñ–≥—É—Ä–∞—Ü—ñ—è —Å—Ç–æ—Ä—ñ–Ω–∫–∏
st.set_page_config(page_title='–ú–µ–Ω—é —Ö–∞—Ä—á—É–≤–∞–Ω–Ω—è', layout='wide')

# –ü—ñ–¥–∫–ª—é—á–µ–Ω–Ω—è –¥–æ –±–∞–∑–∏ –¥–∞–Ω–∏—Ö
conn = sqlite3.connect('menu_app.db')
c = conn.cursor()

# –°—Ç–≤–æ—Ä–µ–Ω–Ω—è —Ç–∞–±–ª–∏—Ü—å
c.execute('''CREATE TABLE IF NOT EXISTS users (username TEXT UNIQUE, password TEXT)''')
c.execute('''CREATE TABLE IF NOT EXISTS logs (user TEXT, date TEXT, weight REAL, activity INTEGER)''')

# –§—É–Ω–∫—Ü—ñ—ó –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—ñ–≤
def hash_password(password):
    return hashlib.sha256(password.encode()).hexdigest()

def create_user(username, password):
    hashed_password = hash_password(password)
    try:
        c.execute('INSERT INTO users VALUES (?, ?)', (username, hashed_password))
        conn.commit()
        return True
    except sqlite3.IntegrityError:
        return False

def login(username, password):
    hashed_password = hash_password(password)
    c.execute('SELECT * FROM users WHERE username=? AND password=?', (username, hashed_password))
    return c.fetchone()

# –°—Ç–∞–Ω –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü—ñ—ó
if 'user' not in st.session_state:
    st.session_state['user'] = None

# –ê–≤—Ç–æ—Ä–∏–∑–∞—Ü—ñ—è —Ç–∞ —Ä–µ—î—Å—Ç—Ä–∞—Ü—ñ—è
st.sidebar.header('üîê –ê–≤—Ç–æ—Ä–∏–∑–∞—Ü—ñ—è')
auth_mode = st.sidebar.radio('–û–±–µ—Ä—ñ—Ç—å –¥—ñ—é:', ['–í—Ö—ñ–¥', '–†–µ—î—Å—Ç—Ä–∞—Ü—ñ—è'])

username = st.sidebar.text_input('–Ü–º\'—è –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞:')
password = st.sidebar.text_input('–ü–∞—Ä–æ–ª—å:', type='password')

if st.sidebar.button('–ü—ñ–¥—Ç–≤–µ—Ä–¥–∏—Ç–∏'):
    if login(username, password) if login_mode == '–í—Ö—ñ–¥' else create_user(username, password):
        st.session_state['user'] = username
        st.sidebar.success('–£—Å–ø—ñ—à–Ω–æ!')
    else:
        st.sidebar.error('–ü–æ–º–∏–ª–∫–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü—ñ—ó –∞–±–æ —Ä–µ—î—Å—Ç—Ä–∞—Ü—ñ—ó')

if 'user' in st.session_state:
    st.success(f"–í—ñ—Ç–∞—î–º–æ, {st.session_state['user']}!")

    # –ó–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è –º–µ–Ω—é
    menu = pd.read_csv('–•–∞—Ä—á—É–≤–∞–Ω–Ω—è.csv', encoding='utf-8-sig').dropna()

    st.title('üçΩÔ∏è –ú–µ–Ω—é –¥–ª—è –ü–∞–≤–ª–∞ —Ç–∞ –ù–∞—Ç–∞–ª—ñ üìÖ')
    selected_day = st.selectbox('üìÖ –î–µ–Ω—å —Ç–∏–∂–Ω—è:', menu['–î–Ω—ñ'].unique())
    filtered_menu = menu[menu['–î–Ω—ñ'] == selected_day]

    def extract_calories(text):
        matches = re.findall(r'(\d+)\s?–∫–∫–∞–ª', text)
        return sum(map(int, matches)) if matches else 0

    filtered_menu['–ö–∞–ª–æ—Ä—ñ—ó (–ü–∞–≤–ª–æ)'] = filtered_menu['–°—Ç—Ä–∞–≤–∞ (—Ä–µ—Ü–µ–ø—Ç, –∫–∞–ª–æ—Ä—ñ—ó, —Ç–µ—Ö–∫–∞—Ä—Ç–∞)'].apply(extract_calories)
    filtered_menu['–ö–∞–ª–æ—Ä—ñ—ó (–ù–∞—Ç–∞–ª—è)'] = (filtered_menu['–ö–∞–ª–æ—Ä—ñ—ó (–ü–∞–≤–ª–æ)'] * 0.8).astype(int)

    for _, row in filtered_menu.iterrows():
        with st.expander(f"‚è∞ {row['–ß–∞—Å –ø—Ä–∏–π–æ–º—É —ó–∂—ñ']}"):
            st.write(f"üìñ {row['–°—Ç—Ä–∞–≤–∞ (—Ä–µ—Ü–µ–ø—Ç, –∫–∞–ª–æ—Ä—ñ—ó, —Ç–µ—Ö–∫–∞—Ä—Ç–∞)']}")
            st.write(f"üçΩÔ∏è –ü–∞–≤–ª–æ: {row['–ü–æ—Ä—Ü—ñ—è –¥–ª—è —á–æ–ª–æ–≤—ñ–∫–∞']} ({row['–ö–∞–ª–æ—Ä—ñ—ó (–ü–∞–≤–ª–æ)']} –∫–∫–∞–ª)")
            st.write(f"üçΩÔ∏è –ù–∞—Ç–∞–ª—è: {row['–ü–æ—Ä—Ü—ñ—è –¥–ª—è –¥—Ä—É–∂–∏–Ω–∏']} ({row['–ö–∞–ª–æ—Ä—ñ—ó (–ù–∞—Ç–∞–ª—è)']} –∫–∫–∞–ª)")

    # –ö–∞–ª—å–∫—É–ª—è—Ç–æ—Ä –Ü–ú–¢
    st.sidebar.header('üßÆ –ö–∞–ª—å–∫—É–ª—è—Ç–æ—Ä –Ü–ú–¢')
    weight = st.sidebar.number_input('–í–∞–≥–∞ (–∫–≥):', 30.0, 200.0, 80.0)
    height = st.sidebar.number_input('–ó—Ä—ñ—Å—Ç (—Å–º):', 100, 220, 173)
    bmi = weight / ((height / 100)**2)
    st.sidebar.metric('üìå –¢–≤—ñ–π –Ü–ú–¢:', f'{bmi:.2f}')

    # –ñ—É—Ä–Ω–∞–ª –≤–∞–≥–∏ —Ç–∞ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—ñ
    st.subheader('üìù –ñ—É—Ä–Ω–∞–ª –≤–∞–≥–∏ —Ç–∞ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—ñ')

    date = st.date_input('üìÖ –î–∞—Ç–∞')
    weight_log = st.number_input('‚öñÔ∏è –í–∞–≥–∞ (–∫–≥)', 30.0, 200.0, step=0.1)
    activity_log = st.slider('üèÉ‚Äç‚ôÇÔ∏è –ê–∫—Ç–∏–≤–Ω—ñ—Å—Ç—å (—Ö–≤)', 0, 180, 30)

    if st.button('‚úÖ –î–æ–¥–∞—Ç–∏ –∑–∞–ø–∏—Å'):
        c.execute('INSERT INTO logs VALUES (?, ?, ?, ?)', (st.session_state['user'], date.isoformat(), weight_log, activity_log))
        conn.commit()
        st.success('‚úÖ –ó–∞–ø–∏—Å –¥–æ–¥–∞–Ω–æ!')

    logs_df = pd.read_sql('SELECT date AS –î–∞—Ç–∞, weight AS –í–∞–≥–∞, activity AS –ê–∫—Ç–∏–≤–Ω—ñ—Å—Ç—å FROM logs WHERE user=?', conn, params=(st.session_state['user'],))
    if not logs_df.empty:
        st.dataframe(logs_df)
        st.line_chart(logs_df.set_index('–î–∞—Ç–∞')['–í–∞–≥–∞'])
        st.bar_chart(logs_df.set_index('–î–∞—Ç–∞')['–ê–∫—Ç–∏–≤–Ω—ñ—Å—Ç—å'])

else:
    st.warning('–ë—É–¥—å –ª–∞—Å–∫–∞, –∞–≤—Ç–æ—Ä–∏–∑—É–π—Ç–µ—Å—å –∞–±–æ –∑–∞—Ä–µ—î—Å—Ç—Ä—É–π—Ç–µ—Å—å —á–µ—Ä–µ–∑ –±–æ–∫–æ–≤—É –ø–∞–Ω–µ–ª—å.')
